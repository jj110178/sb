/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.live.sb.demo.model.impl;

import com.liferay.live.sb.demo.model.Instructor;
import com.liferay.live.sb.demo.model.InstructorModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Instructor service. Represents a row in the &quot;SBDemo_Instructor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.live.sb.demo.model.InstructorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InstructorImpl}.
 * </p>
 *
 * @author dnebinger
 * @see InstructorImpl
 * @see com.liferay.live.sb.demo.model.Instructor
 * @see com.liferay.live.sb.demo.model.InstructorModel
 * @generated
 */
public class InstructorModelImpl extends BaseModelImpl<Instructor>
	implements InstructorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a instructor model instance should use the {@link com.liferay.live.sb.demo.model.Instructor} interface instead.
	 */
	public static final String TABLE_NAME = "SBDemo_Instructor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "instructorId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "started", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SBDemo_Instructor (instructorId LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,started DATE null)";
	public static final String TABLE_SQL_DROP = "drop table SBDemo_Instructor";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.live.sb.demo.model.Instructor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.live.sb.demo.model.Instructor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.live.sb.demo.model.Instructor"));

	public InstructorModelImpl() {
	}

	public long getPrimaryKey() {
		return _instructorId;
	}

	public void setPrimaryKey(long primaryKey) {
		setInstructorId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_instructorId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Instructor.class;
	}

	public String getModelClassName() {
		return Instructor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("instructorId", getInstructorId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("started", getStarted());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long instructorId = (Long)attributes.get("instructorId");

		if (instructorId != null) {
			setInstructorId(instructorId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date started = (Date)attributes.get("started");

		if (started != null) {
			setStarted(started);
		}
	}

	public long getInstructorId() {
		return _instructorId;
	}

	public void setInstructorId(long instructorId) {
		_instructorId = instructorId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public Date getStarted() {
		return _started;
	}

	public void setStarted(Date started) {
		_started = started;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Instructor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Instructor toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Instructor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		InstructorImpl instructorImpl = new InstructorImpl();

		instructorImpl.setInstructorId(getInstructorId());
		instructorImpl.setUserId(getUserId());
		instructorImpl.setCreateDate(getCreateDate());
		instructorImpl.setModifiedDate(getModifiedDate());
		instructorImpl.setName(getName());
		instructorImpl.setStarted(getStarted());

		instructorImpl.resetOriginalValues();

		return instructorImpl;
	}

	public int compareTo(Instructor instructor) {
		long primaryKey = instructor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Instructor instructor = null;

		try {
			instructor = (Instructor)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = instructor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Instructor> toCacheModel() {
		InstructorCacheModel instructorCacheModel = new InstructorCacheModel();

		instructorCacheModel.instructorId = getInstructorId();

		instructorCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			instructorCacheModel.createDate = createDate.getTime();
		}
		else {
			instructorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			instructorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			instructorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		instructorCacheModel.name = getName();

		String name = instructorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			instructorCacheModel.name = null;
		}

		Date started = getStarted();

		if (started != null) {
			instructorCacheModel.started = started.getTime();
		}
		else {
			instructorCacheModel.started = Long.MIN_VALUE;
		}

		return instructorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{instructorId=");
		sb.append(getInstructorId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", started=");
		sb.append(getStarted());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.live.sb.demo.model.Instructor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>instructorId</column-name><column-value><![CDATA[");
		sb.append(getInstructorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>started</column-name><column-value><![CDATA[");
		sb.append(getStarted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Instructor.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Instructor.class
		};
	private long _instructorId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private Date _started;
	private Instructor _escapedModelProxy;
}