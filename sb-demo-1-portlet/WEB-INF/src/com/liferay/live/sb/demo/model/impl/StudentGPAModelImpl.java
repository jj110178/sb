/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.live.sb.demo.model.impl;

import com.liferay.live.sb.demo.model.StudentGPA;
import com.liferay.live.sb.demo.model.StudentGPAModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StudentGPA service. Represents a row in the &quot;SBDemo_StudentGPA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.live.sb.demo.model.StudentGPAModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentGPAImpl}.
 * </p>
 *
 * @author dnebinger
 * @see StudentGPAImpl
 * @see com.liferay.live.sb.demo.model.StudentGPA
 * @see com.liferay.live.sb.demo.model.StudentGPAModel
 * @generated
 */
public class StudentGPAModelImpl extends BaseModelImpl<StudentGPA>
	implements StudentGPAModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student g p a model instance should use the {@link com.liferay.live.sb.demo.model.StudentGPA} interface instead.
	 */
	public static final String TABLE_NAME = "SBDemo_StudentGPA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "gradePoints", Types.DOUBLE },
			{ "year", Types.INTEGER },
			{ "semester", Types.INTEGER },
			{ "creditHours", Types.INTEGER },
			{ "gpa", Types.DOUBLE },
			{ "letterGrade", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SBDemo_StudentGPA (studentId LONG not null primary key,name VARCHAR(75) null,gradePoints DOUBLE,year INTEGER,semester INTEGER,creditHours INTEGER,gpa DOUBLE,letterGrade VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SBDemo_StudentGPA";
	public static final String DATA_SOURCE = "noDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.live.sb.demo.model.StudentGPA"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.live.sb.demo.model.StudentGPA"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.live.sb.demo.model.StudentGPA"));

	public StudentGPAModelImpl() {
	}

	public long getPrimaryKey() {
		return _studentId;
	}

	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_studentId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return StudentGPA.class;
	}

	public String getModelClassName() {
		return StudentGPA.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studentId", getStudentId());
		attributes.put("name", getName());
		attributes.put("gradePoints", getGradePoints());
		attributes.put("year", getYear());
		attributes.put("semester", getSemester());
		attributes.put("creditHours", getCreditHours());
		attributes.put("gpa", getGpa());
		attributes.put("letterGrade", getLetterGrade());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Double gradePoints = (Double)attributes.get("gradePoints");

		if (gradePoints != null) {
			setGradePoints(gradePoints);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer semester = (Integer)attributes.get("semester");

		if (semester != null) {
			setSemester(semester);
		}

		Integer creditHours = (Integer)attributes.get("creditHours");

		if (creditHours != null) {
			setCreditHours(creditHours);
		}

		Double gpa = (Double)attributes.get("gpa");

		if (gpa != null) {
			setGpa(gpa);
		}

		String letterGrade = (String)attributes.get("letterGrade");

		if (letterGrade != null) {
			setLetterGrade(letterGrade);
		}
	}

	public long getStudentId() {
		return _studentId;
	}

	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public double getGradePoints() {
		return _gradePoints;
	}

	public void setGradePoints(double gradePoints) {
		_gradePoints = gradePoints;
	}

	public int getYear() {
		return _year;
	}

	public void setYear(int year) {
		_year = year;
	}

	public int getSemester() {
		return _semester;
	}

	public void setSemester(int semester) {
		_semester = semester;
	}

	public int getCreditHours() {
		return _creditHours;
	}

	public void setCreditHours(int creditHours) {
		_creditHours = creditHours;
	}

	public double getGpa() {
		return _gpa;
	}

	public void setGpa(double gpa) {
		_gpa = gpa;
	}

	public String getLetterGrade() {
		if (_letterGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _letterGrade;
		}
	}

	public void setLetterGrade(String letterGrade) {
		_letterGrade = letterGrade;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StudentGPA.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentGPA toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (StudentGPA)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		StudentGPAImpl studentGPAImpl = new StudentGPAImpl();

		studentGPAImpl.setStudentId(getStudentId());
		studentGPAImpl.setName(getName());
		studentGPAImpl.setGradePoints(getGradePoints());
		studentGPAImpl.setYear(getYear());
		studentGPAImpl.setSemester(getSemester());
		studentGPAImpl.setCreditHours(getCreditHours());
		studentGPAImpl.setGpa(getGpa());
		studentGPAImpl.setLetterGrade(getLetterGrade());

		studentGPAImpl.resetOriginalValues();

		return studentGPAImpl;
	}

	public int compareTo(StudentGPA studentGPA) {
		long primaryKey = studentGPA.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		StudentGPA studentGPA = null;

		try {
			studentGPA = (StudentGPA)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = studentGPA.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StudentGPA> toCacheModel() {
		StudentGPACacheModel studentGPACacheModel = new StudentGPACacheModel();

		studentGPACacheModel.studentId = getStudentId();

		studentGPACacheModel.name = getName();

		String name = studentGPACacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			studentGPACacheModel.name = null;
		}

		studentGPACacheModel.gradePoints = getGradePoints();

		studentGPACacheModel.year = getYear();

		studentGPACacheModel.semester = getSemester();

		studentGPACacheModel.creditHours = getCreditHours();

		studentGPACacheModel.gpa = getGpa();

		studentGPACacheModel.letterGrade = getLetterGrade();

		String letterGrade = studentGPACacheModel.letterGrade;

		if ((letterGrade != null) && (letterGrade.length() == 0)) {
			studentGPACacheModel.letterGrade = null;
		}

		return studentGPACacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{studentId=");
		sb.append(getStudentId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", gradePoints=");
		sb.append(getGradePoints());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", semester=");
		sb.append(getSemester());
		sb.append(", creditHours=");
		sb.append(getCreditHours());
		sb.append(", gpa=");
		sb.append(getGpa());
		sb.append(", letterGrade=");
		sb.append(getLetterGrade());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.live.sb.demo.model.StudentGPA");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gradePoints</column-name><column-value><![CDATA[");
		sb.append(getGradePoints());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>semester</column-name><column-value><![CDATA[");
		sb.append(getSemester());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creditHours</column-name><column-value><![CDATA[");
		sb.append(getCreditHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gpa</column-name><column-value><![CDATA[");
		sb.append(getGpa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>letterGrade</column-name><column-value><![CDATA[");
		sb.append(getLetterGrade());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StudentGPA.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			StudentGPA.class
		};
	private long _studentId;
	private String _name;
	private double _gradePoints;
	private int _year;
	private int _semester;
	private int _creditHours;
	private double _gpa;
	private String _letterGrade;
	private StudentGPA _escapedModelProxy;
}