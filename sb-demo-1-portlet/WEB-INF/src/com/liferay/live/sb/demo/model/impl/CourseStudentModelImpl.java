/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.live.sb.demo.model.impl;

import com.liferay.live.sb.demo.model.CourseStudent;
import com.liferay.live.sb.demo.model.CourseStudentModel;
import com.liferay.live.sb.demo.service.persistence.CourseStudentPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CourseStudent service. Represents a row in the &quot;SBDemo_CourseStudent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.live.sb.demo.model.CourseStudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseStudentImpl}.
 * </p>
 *
 * @author dnebinger
 * @see CourseStudentImpl
 * @see com.liferay.live.sb.demo.model.CourseStudent
 * @see com.liferay.live.sb.demo.model.CourseStudentModel
 * @generated
 */
public class CourseStudentModelImpl extends BaseModelImpl<CourseStudent>
	implements CourseStudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course student model instance should use the {@link com.liferay.live.sb.demo.model.CourseStudent} interface instead.
	 */
	public static final String TABLE_NAME = "SBDemo_CourseStudent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "grade", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table SBDemo_CourseStudent (studentId LONG not null,courseId LONG not null,userId LONG,createDate DATE null,modifiedDate DATE null,grade DOUBLE,primary key (studentId, courseId))";
	public static final String TABLE_SQL_DROP = "drop table SBDemo_CourseStudent";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.live.sb.demo.model.CourseStudent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.live.sb.demo.model.CourseStudent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.live.sb.demo.model.CourseStudent"),
			true);
	public static long COURSEID_COLUMN_BITMASK = 1L;
	public static long STUDENTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.live.sb.demo.model.CourseStudent"));

	public CourseStudentModelImpl() {
	}

	public CourseStudentPK getPrimaryKey() {
		return new CourseStudentPK(_studentId, _courseId);
	}

	public void setPrimaryKey(CourseStudentPK primaryKey) {
		setStudentId(primaryKey.studentId);
		setCourseId(primaryKey.courseId);
	}

	public Serializable getPrimaryKeyObj() {
		return new CourseStudentPK(_studentId, _courseId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CourseStudentPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return CourseStudent.class;
	}

	public String getModelClassName() {
		return CourseStudent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studentId", getStudentId());
		attributes.put("courseId", getCourseId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("grade", getGrade());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Double grade = (Double)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}
	}

	public long getStudentId() {
		return _studentId;
	}

	public void setStudentId(long studentId) {
		_columnBitmask |= STUDENTID_COLUMN_BITMASK;

		if (!_setOriginalStudentId) {
			_setOriginalStudentId = true;

			_originalStudentId = _studentId;
		}

		_studentId = studentId;
	}

	public long getOriginalStudentId() {
		return _originalStudentId;
	}

	public long getCourseId() {
		return _courseId;
	}

	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public double getGrade() {
		return _grade;
	}

	public void setGrade(double grade) {
		_grade = grade;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CourseStudent toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CourseStudent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CourseStudentImpl courseStudentImpl = new CourseStudentImpl();

		courseStudentImpl.setStudentId(getStudentId());
		courseStudentImpl.setCourseId(getCourseId());
		courseStudentImpl.setUserId(getUserId());
		courseStudentImpl.setCreateDate(getCreateDate());
		courseStudentImpl.setModifiedDate(getModifiedDate());
		courseStudentImpl.setGrade(getGrade());

		courseStudentImpl.resetOriginalValues();

		return courseStudentImpl;
	}

	public int compareTo(CourseStudent courseStudent) {
		CourseStudentPK primaryKey = courseStudent.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CourseStudent courseStudent = null;

		try {
			courseStudent = (CourseStudent)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		CourseStudentPK primaryKey = courseStudent.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		CourseStudentModelImpl courseStudentModelImpl = this;

		courseStudentModelImpl._originalStudentId = courseStudentModelImpl._studentId;

		courseStudentModelImpl._setOriginalStudentId = false;

		courseStudentModelImpl._originalCourseId = courseStudentModelImpl._courseId;

		courseStudentModelImpl._setOriginalCourseId = false;

		courseStudentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseStudent> toCacheModel() {
		CourseStudentCacheModel courseStudentCacheModel = new CourseStudentCacheModel();

		courseStudentCacheModel.studentId = getStudentId();

		courseStudentCacheModel.courseId = getCourseId();

		courseStudentCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			courseStudentCacheModel.createDate = createDate.getTime();
		}
		else {
			courseStudentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			courseStudentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			courseStudentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		courseStudentCacheModel.grade = getGrade();

		return courseStudentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{studentId=");
		sb.append(getStudentId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.live.sb.demo.model.CourseStudent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CourseStudent.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CourseStudent.class
		};
	private long _studentId;
	private long _originalStudentId;
	private boolean _setOriginalStudentId;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private double _grade;
	private long _columnBitmask;
	private CourseStudent _escapedModelProxy;
}